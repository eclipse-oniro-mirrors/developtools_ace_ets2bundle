# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")

shared_library("es2panda") {
  external_deps = [ "ets_frontend:libes2panda_public_headers" ]
  sources = [
    "../koalaui/interop/src/cpp/common-interop.cc",
    "../koalaui/interop/src/cpp/interop-logging.cc",
    "../koalaui/interop/src/cpp/napi/convertors-napi.cc",
    "./src/bridges.cc",
    "./src/common.cc",
    "./src/generated/bridges.cc",
    "./src/memoryTracker.cc",
  ]

  include_dirs = [
    "../koalaui/interop/src/cpp",
    "../koalaui/interop/src/cpp/types",
    "../koalaui/interop/src/cpp/napi",
    "../node_modules/node-api-headers/include",
    "../node_modules/node-addon-api",
    "./include",
    rebase_path("$root_gen_dir/arkcompiler/ets_frontend/ets2panda/"),
  ]

  defines = [
    "KOALA_INTEROP_MODULE=NativeModule",
    "INTEROP_LIBRARY_NAME=es2panda",
    "KOALA_USE_NODE_VM",
    "KOALA_NAPI",
    "NODE_ADDON_API_DISABLE_CPP_EXCEPTIONS",
  ]

  configs -= [ "//build/config/compiler:compiler" ]

  if (is_mac) {
    cflags_cc = [
      "-std=c++17",
      "-Wall",
      "-Werror",
      "-Wno-unused-variable",
      "-fPIC",
    ]

    ldflags = [
      "-fPIC",
      "-Wl,-undefined,dynamic_lookup",
      "-fuse-ld=lld",
      "-Wl,--icf=all",
      "-Wl,--color-diagnostics",
      "-m64",
    ]
    defines += [ "KOALA_MACOS" ]
    output_extension = "node"
  }

  if (current_os == "linux") {
    cflags_cc = [
      "-std=c++17",
      "-Wall",
      "-Werror",
      "-Wno-unused-variable",
      "-fPIC",
    ]

    ldflags = [
      "-Wl,--allow-shlib-undefined",
      "-Wl,--fatal-warnings",
      "-Wl,--build-id=md5",
      "-fPIC",
      "-Wl,-z,noexecstack",
      "-Wl,-z,now",
      "-Wl,-z,relro",

      # "-Wl,-z,defs", # must no use this option
      "-Wl,--as-needed",
      "-fuse-ld=lld",
      "-Wl,--icf=all",
      "-Wl,--color-diagnostics",
      "-m64",
    ]
    defines += [ "KOALA_LINUX" ]
    output_extension = "node"
  } else if (current_os == "mingw") {
    output_extension = "dll"
    cflags_cc = [
      "-std=c++17",
      "-Wall",
      "-Werror",
      "-Wno-unused-variable",
      "-fPIC",
      "-Wno-error=deprecated-copy",
      "-enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang",
      "-ftrivial-auto-var-init=zero",
      "-fcolor-diagnostics",
      "-fmerge-all-constants",
      "-Xclang",
      "-mllvm",
      "-Xclang",
      "-instcombine-lower-dbg-declare=0",
      "-no-canonical-prefixes",
      "-rtlib=compiler-rt",
      "-stdlib=libc++",
      "-lunwind",
      "-lpthread",
      "-Qunused-arguments",
      "-fuse-ld=lld",
      "-fno-stack-protector",
      "-fno-strict-aliasing",
      "-Wno-builtin-macro-redefined",
      "-fms-extensions",
      "-target",
      "x86_64-pc-windows-gnu",
      "-D__CUSTOM_SECURITY_LIBRARY",
    ]

    ldflags = [
      "-Wl,--fatal-warnings",
      "-fPIC",
      "-Wl,--as-needed",
      "-fuse-ld=lld",
      "-Wl,--icf=all",
      "-m64",
      "-static",
      "-rtlib=compiler-rt",
      "-stdlib=libc++",
      "-std=c++17",
      "-lunwind",
      "-lpthread",
      "-Qunused-arguments",
      "-target",
      "x86_64-pc-windows-gnu",
    ]
    defines += [ "KOALA_WINDOWS" ]
    sources += [ "../koalaui/interop/src/cpp/napi/win-dynamic-node.cc" ]
  }
}

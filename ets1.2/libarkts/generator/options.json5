/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
    "irHack": [
        "AnnotationUsage",
        "ETSFunctionType",
        "ETSUnionType",
        "ETSNullType",
        "ETSUndefinedType",
    ],
    "ignore": {
        "full": [
            "es2panda_Config",
            "es2panda_ExternalSource",
            "es2panda_OverloadInfo",
            "es2panda_GlobalContext",

            // Duplicates of types in ir namespace
            // They will be removed in the fututre.
            'es2panda_Signature',
            'es2panda_CheckerContext',
            'es2panda_Type',
            'es2panda_TypeRelation',
            'es2panda_GlobalTypesHolder',
            'es2panda_Variable',
            'es2panda_Scope',
            'es2panda_Path',
            'es2panda_ResolveResult',
            'es2panda_RecordTable',
            'es2panda_BoundContext',
            'es2panda_ImportPathManager',
            'es2panda_Options',
            'es2panda_AstNode',
            'es2panda_Program',
            'es2panda_ArkTsConfig',
            'es2panda_FunctionSignature',
            'es2panda_DiagnosticKind',

            'NodeTransformer',
            'NodeTraverser',
            'AstNodeForEachFunction',
            'ClassBuilder',
            'ClassInitializerBuilder',
            'MethodBuilder',
            'NodePredicate',
            'PropertyProcessor',
            'PropertyTraverser',

            'checker.*',
            'varbinder.*',
            'parser.*',
            'util.*',
            'gen.*',
            'es2panda.*',
            'ast_verifier.*',

            'parser.Program!',
            'es2panda.ArkTsConfig!',
            // Do not support node type
            //'varbinder.FunctionDecl!',
            //'varbinder.InterfaceDecl!',
            // MemberExpression has checker.ETSFunctionType ExtensionAccessorTypeConst(es2panda_Context context);
            //'checker.ETSFunctionType!',
            //'ir.ETSFunctionType',

            'ir.Annotated',
            'ir.AnnotationAllowed',
            'ir.Typed',
            'ir.VectorIterationGuard',

            'VoidPtr',
        ],
        "partial": [
            {
                interface: "es2panda_Impl",
                methods: [
                    "LogSyntaxError", "LogWarning", "LogTypeError", // wrong idl
                    "DestroyContext", // cleanup arena (Improve: move this cleanup to another method)

                    // Handwritten bridges
                    "AstNodeRebind",
                    "ConfigGetOptions",
                    "CreateCacheContextFromFile",
                    "CreateContextFromFile",
                    "CreateContextFromString",
                    "CreateContextGenerateAbcForExternalSourceFiles",
                    "CreateDiagnosticInfo",
                    "CreateDiagnosticKind",
                    "CreateGlobalContext",
                    "CreateSuggestionInfo",
                    "DestroyGlobalContext",
                    "SourcePositionCol",
                    "ExternalSourceName",
                    "ExternalSourcePrograms",
                    "GenerateTsDeclarationsFromContext",
                    "LogDiagnostic",
                    "GetSemanticErrors",
                    "GetSyntaxErrors",
                    "GetPluginErrors",
                    "GetWarnings",
                    "NumberLiteralStrConst",
                    "MemInitialize",
                    "MemFinalize",
                ],
            },
            {
                interface: "MethodDefinition",
                methods: [
                    "GetOverloadInfo",  // return type is wrong
                ]
            },
            {
                interface: "Decl", // handwritten bridge
                methods: [
                    "Node"
                ]
            },
            {
                interface: "ETSParser", // handwritten bridge
                methods: [
                    "BuildImportDeclaration",
                    "CreateExpression",
                    "GetGlobalProgramAbsName",
                    "GetImportPathManager",
                ]
            },
            {
                interface: "Program", // handwritten bridge
                methods: [
                    "DirectExternalSources",
                    "ExternalSources",
                ]
            },
            {
                interface: "Scope", // handwritten bridge
                methods: [
                    "SetParent",
                ]
            },
            {
                interface: "Signature", // handwritten bridge
                methods: [
                    "Function",
                ]
            },
            {
                interface: "TSInterfaceBody", // handwritten bridge
                methods: [
                    "BodyPtr",
                ]
            },
            {
                interface: "AnnotationDeclaration",
                methods: [
                    "PropertiesPtrConst" // interfaces create-to-param matching
                ]
            },
            {
                interface: "NumberLiteral",
                methods: [
                    "SetInt",
                    "SetLong",
                    "SetDouble",
                    "SetFloat"
                ]
            },
            {
                interface: "AnnotationUsage",
                methods: [
                    "PropertiesPtrConst" // interfaces create-to-param matching
                ]
            },
            {
                interface: "TSInterfaceBody",
                methods: [
                    "BodyPtr" // interfaces create-to-param matching
                ]
            },
            {
                interface: "Signature",
                methods: [
                    "ProtectionFlagConst" // u8
                ]
            },
            {
                interface: "ETSReExportDeclaration",
                methods: [
                    "Create", // sequence<String>
                    "Update", // sequence<String>
                    "GetUserPathsConst" // sequence<String>
                ]
            },
            {
                interface: "CharLiteral",
                methods: [
                    "Create1", // KShort,
                    "Update1", // KShort
                    "CharConst", // KShort
                ]
            },
            {
                interface: "ForUpdateStatement",
                methods: [
                    "Update" // forbidden naming
                ]
            },
            {
                interface: "CallExpression",
                methods: [
                    "Update" // differs from handwritten
                ]
            },
            {
                interface: "TryStatement",
                methods: [
                    "AddFinalizerInsertion" // idl missing const
                ]
            },
            {
                interface: "MemberExpression",
                methods: [
                    "SetExtensionAccessorType" // ETSFunction type ambiguity
                ]
            },
            {
                interface: "ArkTsConfig",
                methods: [
                    "EntriesConst",
                    "FilesConst",
                    "Parse",
                ]
            },
        ]
    },
    nonNullable: [
        {
            name: "ScriptFunction",
            methods: [
                {
                    name: "SetIdent",
                    types: ["id"]
                }
            ]
        },
        {
            name: "ArrowFunctionExpression",
            methods: [
                {
                    name: "Function",
                    types: ["returnType"]
                },
                {
                    name: "FunctionConst",
                    types: ["returnType"]
                },
            ]
        },
        {
            name : "FunctionDeclaration",
            methods: [
                {
                    name: "FunctionConst",
                    types: ["returnType"]
                }
            ]
        },
        {
            name: "CallExpression",
            methods: [
                {
                    name: "CalleeConst",
                    types: ["returnType"]
                }
            ]
        },
        {
            name : "ExpressionStatement",
            methods: [
                {
                    name: "GetExpressionConst",
                    types: ["returnType"]
                }
            ]
        },
        {
            name: "IfStatement",
            methods: [
                {
                    name: "TestConst",
                    types: ["returnType"]
                },
                {
                    name: "ConsequentConst",
                    types: ["returnType"]
                }
            ]
        },
        {
            name: "MemberExpression",
            methods: [
                {
                    name: "ObjectConst",
                    types: ["returnType"]
                },
                {
                    name: "PropertyConst",
                    types: ["returnType"]
                }
            ]
        },
        {
            name: "ETSParameterExpression",
            methods: [
                {
                    name: "IdentConst",
                    types: ["returnType"]
                }
            ]
        },
        {
            name: "VariableDeclarator",
            methods: [
                {
                    name: "IdConst",
                    types: ["returnType"]
                }
            ]
        },
        {
            name: "ClassElement",
            methods: [
                {
                    name: "IdConst",
                    types: ["returnType"]
                }
            ]
        },
        {
            name: "MethodDefinition",
            methods: [
                {
                    name: "Function",
                    types: ["returnType"]
                },
                {
                    name: "FunctionConst",
                    types: ["returnType"]
                },
            ]
        },
        {
            name: "ETSFunctionType",
            methods: [
                {
                    name: "ReturnTypeConst",
                    types: ["returnType"]
                }
            ]
        },
        {
            name: "TSTypeAliasDeclaration",
            methods: [
                {
                    name: "TypeAnnotationConst",
                    types: ["returnType"]
                }
            ]
        },
        {
            name: "Program",
            methods: [
                {
                    name: "Ast",
                    types: ["returnType"]
                }
            ]
        },
        {
            name: "ClassDeclaration",
            methods: [
                {
                    name: "Definition",
                    types: ["returnType"]
                }
            ]
        },
    ],
    fragments: [
        {
            interface: "MethodDefinition",
            methods: [
                {
                    name: "setChildrenParentPtr",
                    definition: "extension_MethodDefinitionSetChildrenParentPtr",
                },
                {
                    name: "onUpdate",
                    definition: "extension_MethodDefinitionOnUpdate",
                },
            ]
        },
        {
            interface: "ETSModule",
            methods: [
                {
                    name: "getNamespaceFlag",
                    definition: "extension_ETSModuleGetNamespaceFlag",
                }
            ]
        },
        {
            interface: "ScriptFunction",
            methods: [
                {
                    name: "getSignaturePointer",
                    definition: "extension_ScriptFunctionGetSignaturePointer",
                },
                {
                    name: "setSignaturePointer",
                    definition: "extension_ScriptFunctionSetSignaturePointer",
                },
                {
                    name: "getParamsCasted",
                    definition: "extension_ScriptFunctionGetParamsCasted",
                },
                {
                    name: "getPreferredReturnTypePointer",
                    definition: "extension_ScriptFunctionGetPreferredReturnTypePointer",
                },
                {
                    name: "setPreferredReturnTypePointer",
                    definition: "extension_ScriptFunctionSetPreferredReturnTypePointer",
                },
            ]
        },
        {
            interface: "ClassDefinition",
            methods: [
                {
                    name: "setBody",
                    definition: "extension_ClassDefinitionSetBody",
                },
            ]
        },
        {
            interface: "Expression",
            methods: [
                {
                    name: "getPreferredTypePointer",
                    definition: "extension_ExpressionGetPreferredTypePointer",
                },
                {
                    name: "setPreferredTypePointer",
                    definition: "extension_ExpressionSetPreferredTypePointer",
                },
            ]
        },
        {
            interface: "Program",
            methods: [
                {
                    name: "getAstCasted",
                    definition: "extension_ProgramGetAstCasted",
                },
                {
                    name: "getExternalSources",
                    definition: "extension_ProgramGetExternalSources",
                },
            ],
        },
        {
            interface: "es2panda_SourcePosition",
            methods: [
                {
                    name: "getLine",
                    definition: "extension_SourcePositionGetLine",
                },
                {
                    name: "getCol",
                    definition: "extension_SourcePositionGetCol",
                },
                {
                    name: "getIndex",
                    definition: "extension_SourcePositionGetIndex",
                },
                {
                    name: "toString",
                    definition: "extension_SourcePositionToString",
                },
            ],
        },
        {
            interface: "NumberLiteral",
            methods: [
                {
                    name: "value",
                    definition: "extension_NumberLiteralValue",
                },
            ],
        },
        {
            interface: "ETSFunctionType",
            methods: [
                {
                    name: "getParamsCasted",
                    definition: "extension_ETSFunctionTypeGetParamsCasted",
                },
            ],
        },
    ],
    parameters: [
        {
            interface: "ArrowFunctionExpression",
            parameters: [
                {
                    name: "annotations",
                },
            ],
        },
        {
            interface: "CallExpression",
            parameters: [
                {
                    name: "trailingBlock",
                },
            ],
        },
        {
            interface: "ClassDeclaration",
            parameters: [
                {
                    name: "modifierFlags",
                },
            ],
        },
        {
            interface: "ClassDefinition",
            parameters: [
                {
                    name: "annotations",
                },
            ],
        },
        {
            interface: "ClassProperty",
            parameters: [
                {
                    name: "annotations",
                },
            ],
        },
        {
            interface: "ETSFunctionType",
            parameters: [
                {
                    name: "annotations",
                },
            ],
        },
        {
            interface: "ETSParameterExpression",
            parameters: [
                {
                    name: "annotations",
                },
            ],
        },
        {
            interface: "ETSUnionType",
            parameters: [
                {
                    name: "annotations",
                },
            ],
        },
        {
            interface: "MethodDefinition",
            parameters: [
                {
                    name: "overloads",
                },
            ],
        },
        {
            interface: "ScriptFunction",
            parameters: [
                {
                    name: "ident",
                    setter: "setIdent",
                    getter: "id",
                },
                {
                    name: "annotations",
                },
            ],
        },
        {
            interface: "TSInterfaceDeclaration",
            parameters: [
                {
                    name: "modifierFlags",
                },
            ],
        },
        {
            interface: "TSTypeAliasDeclaration",
            parameters: [
                {
                    name: "annotations",
                },
                {
                    name: "modifierFlags",
                },
            ],
        },
        {
            interface: "VariableDeclaration",
            parameters: [
                {
                    name: "annotations",
                },
            ],
        },
    ],
}

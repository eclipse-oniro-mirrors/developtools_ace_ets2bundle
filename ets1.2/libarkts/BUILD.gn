# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if (!defined(koala_mr)) {
    # OHOS build tree workaround
    import("../../../koala_integration.gni")
}
if (!koala_mr.is_rri) {
    import("//build/ohos.gni")
}
import("${koala_mr.imports_prefix}/npm.gni")

ws_node_modules_dir = koala_mr.ui2abc_path + "/node_modules"

if (koala_mr.is_rri) {
    npm_cmd("panda_sdk_reinstall") {
        project_path = rebase_path(".")
        run_tasks = [
            "panda:sdk:reinstall"
        ]
        deps = [
            ":libarkts_install"
        ]
    }
} else {

    # Use from OHOS-SDK build (//build/ohos/sdk/ohos_sdk_description_std.json)

    ohos_copy("libarkts-sdk") {
        deps = [ ":libarkts_sdk_copy" ]
        sources = [ rebase_path("$target_gen_dir") ]
        outputs = [ target_out_dir + "/$target_name" ]
        module_source_dir = target_out_dir + "/$target_name"
        module_install_name = ""
        subsystem_name = "arkui"
        part_name = "ace_engine"
    }

}


if (current_toolchain == host_toolchain) {
    npm_cmd("regenerate") {
        assert(current_toolchain == host_toolchain, "must be executed with host_toolchain")
        if (koala_mr.is_rri) {
            deps = [
                ":libarkts_install",
                ":panda_sdk_reinstall"
            ]
        } else {
            deps = [
                "${koala_mr.ui2abc_path}:ui2abc_install_all(${host_toolchain})",
                "${koala_mr.ui2abc_path}:ui2abc_panda_sdk"
            ]
        }
        project_path = rebase_path(".")
        run_tasks = [
            "regenerate"
        ]
    }

    npm_install("libarkts_install") {
        project_path = rebase_path(".")
    }
}

shared_library("es2panda_lib") {
    if (!koala_mr.is_rri) {
        external_deps = [ "ets_frontend:ets2panda" ]
    }

    sources = [
        "${koala_mr.libarkts_path}/native/src/common.cc",
        "${koala_mr.libarkts_path}/native/src/bridges.cc",

        "${koala_mr.interop_path}/src/cpp/napi/convertors-napi.cc",
        "${koala_mr.interop_path}/src/cpp/callback-resource.cc",
        "${koala_mr.interop_path}/src/cpp/interop-logging.cc",
        "${koala_mr.interop_path}/src/cpp/common-interop.cc"
    ]

    include_dirs = [
        "${koala_mr.es2panda_path}/public",
        "${koala_mr.es2panda_path}",
        "${koala_mr.libarkts_path}/native/src",
        "${koala_mr.root_path}/interop/src/cpp",
        "${koala_mr.root_path}/interop/src/cpp/napi",
        "${koala_mr.root_path}/interop/src/cpp/types",
        "$ws_node_modules_dir/node-api-headers/include",
        "$ws_node_modules_dir/node-addon-api"
    ]

    defines = [
        "KOALA_INTEROP_MODULE=NativeModule",
        "INTEROP_LIBRARY_NAME=es2panda",
        "KOALA_USE_NODE_VM",
        "KOALA_NAPI"
    ]

    deps = [
        ":regenerate_and_copy",
    ]
    #sources += get_target_outputs(deps[1]) // FIXME: cannot find target
    sources += [ "$target_out_dir/generated/native/bridges.cc" ]

    if (!koala_mr.is_rri) {
        deps += [ "${koala_mr.ui2abc_path}:ui2abc_install($host_toolchain)" ]
        configs -= [ "//build/config/compiler:compiler" ]
    }

    if (is_mac) {
        cflags_cc = [
            "-std=c++17",
            "-Wall",
            "-Werror",
            "-Wno-unused-variable",
            "-fPIC",
        ]

        ldflags = [
            "-fPIC",
            "-Wl,-undefined,dynamic_lookup",
            "-fuse-ld=lld",
            "-Wl,--icf=all",
            "-Wl,--color-diagnostics",
            "-m64"
        ]
        defines += [ "KOALA_MACOS" ]
        output_extension = "node"
    }

    if (is_linux) {
        cflags_cc = [
            "-std=c++17",
            "-Wall",
            "-Werror",
            "-Wno-unused-command-line-argument",
            "-Wno-unused-variable",
            "-fPIC",
        ]

        ldflags = [
            "-Wl,--allow-shlib-undefined",
            "-Wl,--fatal-warnings",
            "-Wl,--build-id=md5",
            "-fPIC",
            "-Wl,-z,noexecstack",
            "-Wl,-z,now",
            "-Wl,-z,relro",

            # "-Wl,-z,defs", # must no use this option
            "-Wl,--as-needed",
            "-fuse-ld=lld",
            "-Wl,--icf=all",
            "-Wl,--color-diagnostics",
            "-m64",
        ]
        defines += [ "KOALA_LINUX" ]
        output_extension = "node"
    } else if (current_os == "mingw") {
        cflags_cc = [
            "-std=c++17",
            "-Wall",
            "-Werror",
            "-Wno-unused-variable",
            "-Wno-unused-command-line-argument",
            "-fPIC",
            "-Wno-error=deprecated-copy",
            "-enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang",
            "-ftrivial-auto-var-init=zero",
            "-fcolor-diagnostics",
            "-fmerge-all-constants",
            "-Xclang",
            "-mllvm",
            "-Xclang",
            "-instcombine-lower-dbg-declare=0",
            "-no-canonical-prefixes",
            "-fuse-ld=lld",
            "-fno-stack-protector",
            "-fno-strict-aliasing",
            "-Wno-builtin-macro-redefined",
            "-fms-extensions",
            "-static",
            "-rtlib=compiler-rt",
            "-stdlib=libc++",
            "-lunwind",
            "-lpthread",
            "-Qunused-arguments",
            "-target",
            "x86_64-pc-windows-gnu",
            "-D__CUSTOM_SECURITY_LIBRARY",
        ]

        ldflags = [
            "-Wl,--fatal-warnings",
            "-fPIC",
            "-Wl,--as-needed",
            "-fuse-ld=lld",
            "-Wl,--icf=all",
            "-m64",
            "-static",
            "-rtlib=compiler-rt",
            "-stdlib=libc++",
            "-std=c++17",
            "-lunwind",
            "-lpthread",
            "-Qunused-arguments",
            "-target",
            "x86_64-pc-windows-gnu",
        ]
        output_extension = "dll"
        defines += [ "KOALA_WINDOWS" ]
        sources += [ "${koala_mr.interop_path}/src/cpp/napi/win-dynamic-node.cc" ]
    }
}

action("es2panda_lib_copy") {
    script = "gn/command/copy.py"
    if (defined(build_ohos_sdk) && build_ohos_sdk) {
        deps = [
            ":es2panda_lib"
        ]
        from_path = root_out_dir
    } else {
        deps = [
            ":es2panda_lib(${host_toolchain})"
        ]
        if (host_toolchain != current_toolchain) {
            toolchain_parts = string_split(host_toolchain, ":")
            from_path = "$root_out_dir/${toolchain_parts[1]}"
        } else {
            from_path = root_out_dir
        }
    }

    # inputs = [
    #     "$from_path/libes2panda_lib.node"
    # ]
    outputs = [
        "$target_out_dir/es2panda.node"
    ]
    args = [
        "--from-path", rebase_path(from_path),
        "--to-path", rebase_path("."),
        "--current-os", current_os,
        "--current-cpu", current_cpu
    ]
}

# The generated bridges.cc doesn't exist at configure step and
# should be linked with a target that creates it. As outputs cannot
# point outside target_out_dir - make a copy target.
copy("regenerate_and_copy") {
    sources = [  "${koala_mr.libarkts_path}/generated/native/bridges.cc", ]
    outputs = [  "$target_out_dir/generated/native/bridges.cc", ]
    deps = [ ":regenerate(${host_toolchain})", ]
}
# for //developtools/ace_ets2bundle

npm_cmd("libarkts_compile") {
    deps = [
        "${koala_mr.interop_path}:interop_install(${host_toolchain})",
        "${koala_mr.incremental_path}:incremental_install(${host_toolchain})",
        ":regenerate(${host_toolchain})"
    ]
    outputs = [
        "$target_out_dir/libarkts.js"
    ]
    project_path = rebase_path(".")
    run_tasks = [ "compile:koala:interop", "compile:js" ]
}

group("es2panda") {
    deps = [
        ":es2panda_lib_copy",
        ":libarkts_compile(${host_toolchain})"
    ]
}

group("libarkts") {
    deps = [
        ":es2panda_lib",
        ":libarkts_compile(${host_toolchain})"
    ]
}

action("libarkts_sdk_copy") {
    script = "../gn/command/copy_libs.py"
    args = [
        "--source_path", rebase_path(get_path_info(".", "abspath")),
        "--output_path", rebase_path("$target_gen_dir"),
        "--root_out_dir", rebase_path(root_out_dir),
    ]
    outputs = [ "$target_gen_dir" ]
    deps = [
        "${koala_mr.ui2abc_path}:ui2abc"
    ]
}

/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * THIS FILE IS AUTOGENERATED BY arktscgen. DO NOT EDIT MANUALLY!
 */

import {
    global,
    passNode,
    passNodeArray,
    unpackNonNullableNode,
    unpackNode,
    unpackNodeArray,
    assertValidPeer,
    AstNode,
    KNativePointer,
    nodeByType,
    ArktsObject,
    unpackString
} from "../../reexport-for-generated"

import { ErrorLogger } from "./ErrorLogger"

export class ArkTsConfig extends ArktsObject {
    constructor(pointer: KNativePointer) {
        super(pointer)
    }
    static createArkTsConfig(configPath: string, de?: ErrorLogger): ArkTsConfig {
        return new ArkTsConfig(global.generatedEs2panda._CreateArkTsConfig(global.context, configPath, passNode(de)))
    }
    /** @deprecated */
    resolveAllDependenciesInArkTsConfig(): this {
        global.generatedEs2panda._ArkTsConfigResolveAllDependenciesInArkTsConfig(global.context, this.peer)
        return this
    }
    get configPath(): string {
        return unpackString(global.generatedEs2panda._ArkTsConfigConfigPathConst(global.context, this.peer))
    }
    get package(): string {
        return unpackString(global.generatedEs2panda._ArkTsConfigPackageConst(global.context, this.peer))
    }
    get baseUrl(): string {
        return unpackString(global.generatedEs2panda._ArkTsConfigBaseUrlConst(global.context, this.peer))
    }
    get rootDir(): string {
        return unpackString(global.generatedEs2panda._ArkTsConfigRootDirConst(global.context, this.peer))
    }
    get outDir(): string {
        return unpackString(global.generatedEs2panda._ArkTsConfigOutDirConst(global.context, this.peer))
    }
    get useUrl(): boolean {
        return global.generatedEs2panda._ArkTsConfigUseUrlConst(global.context, this.peer)
    }
    protected readonly brandArkTsConfig: undefined
}
export function isArkTsConfig(node: object | undefined): node is ArkTsConfig {
    return node instanceof ArkTsConfig
}

class BasicDataSource implements IDataSource {
    private listeners: DataChangeListener[] = []
  
    public totalCount(): number {
        return 0
    }
    public getData(index: number): any {
        return undefined
    }
  
    registerDataChangeListener(listener: DataChangeListener): void {
        if (this.listeners.indexOf(listener) < 0) {
            console.info('add listener')
            this.listeners.push(listener)
        }
    }
    unregisterDataChangeListener(listener: DataChangeListener): void {
        const pos = this.listeners.indexOf(listener);
        if (pos >= 0) {
            console.info('remove listener')
            this.listeners.splice(pos, 1)
        }
    }
  
    notifyDataReload(): void {
        this.listeners.forEach(listener => {
            listener.onDataReloaded()
        })
    }
    notifyDataAdd(index: number): void {
        this.listeners.forEach(listener => {
            listener.onDataAdd(index)
        })
    }
    notifyDataChange(index: number): void {
        this.listeners.forEach(listener => {
            listener.onDataChange(index)
        })
    }
    notifyDataDelete(index: number): void {
        this.listeners.forEach(listener => {
            listener.onDataDelete(index)
        })
    }
    notifyDataMove(from: number, to: number): void {
        this.listeners.forEach(listener => {
            listener.onDataMove(from, to)
        })
    }
  }
  
  class MyDataSource extends BasicDataSource {
    private dataArray: string[] = ['/path/image0', '/path/image1', '/path/image2', '/path/image3']
  
    public totalCount(): number {
        return this.dataArray.length
    }
    public getData(index: number): any {
        return this.dataArray[index]
    }
  
    public addData(index: number, data: string): void {
        this.dataArray.splice(index, 0, data)
        this.notifyDataAdd(index)
    }
    public pushData(data: string): void {
        this.dataArray.push(data)
        this.notifyDataAdd(this.dataArray.length - 1)
    }
  }
  
  @Entry
  @Component
  struct Test {
  private data: MyDataSource = new MyDataSource()
  build() {
    Grid() {
      LazyForEach (this.data,
      (row) => {
        GridItem() {
          Text(row)
        }
      },
      row => row)
    }
  }
  }
  
  @Component
  struct ChildTest {
  private data: MyDataSource = new MyDataSource()
  count: number = 0;
  build() {
    Grid() {
      LazyForEach (this.data,
      (row) => {
        GridItem() {
          Text(row)
        }
      },
      row => row)
      .onMove((from: number, to: number) => {
        this.count += 1;
      })
    }
  }
}